{"version":3,"sources":["components/Card.js","components/CardList.js","components/Search.js","components/Scroll.js","components/counterButton.js","components/header.js","constants.js","actions.js","api/api.js","containers/App.js","reportWebVitals.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","Search","searchField","searchChange","console","log","aria-label","type","placeholder","value","onChange","Scroll","props","style","overflowY","border","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","onClick","color","Component","Header","CHANGE_SEARCHFIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","requestRobots","dispatch","link","fetch","then","response","json","data","payload","catch","error","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","e","text","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.50696c1f.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Card = ({id, name, email}) => {\n\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robot' src={`https://robohash.org/${id}?size=200x200`}/>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n    \n    return (\n        <div className='tc'>\n            {\n                robots.map((user, i) => {\n                    return (\n                        <Card \n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n\n                    )\n                })\n            }\n        </div>\n    )\n\n}\n\nexport default CardList;","import React from 'react';\n\nconst Search = ({searchField, searchChange}) => {\n    console.log('searchbox');\n    return (\n        <div className='pa2'>            \n            <input \n                aria-label=\"search-robots\"\n                className='pa3 ba b--green bg-lightest-blue' \n                type='search'\n                placeholder='Search for robots'\n                value={searchField}\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default Search;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY:'scroll', border:'5px solid black', height:'750px' }}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n\n    constructor(){\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(this.state.count !== nextState.count){\n            return true;\n        }\n        return false;\n    }\n\n    updateCount = () => {\n        //this.setState({count: this.state.count + 1})\n        this.setState(state => {\n           return {count: state.count +1}\n        });\n    }\n\n    render(){\n        const count = this.state.count;\n        return (\n            <button aria-label=\"btn-count\" onClick={this.updateCount} color={this.props.color}>Count:{count}</button>\n        );\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\nimport CounterButton from './counterButton';\n\nclass Header extends Component {\n\n    render(){\n        return (\n            <div>\n                <h1 className='f1'>Robots friends</h1>\n                <CounterButton color='red'/>\n            </div>\n        )\n        \n        \n    }\n\n}\n\nexport default Header;\n","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {apiCall} from './api/api';\n\nimport {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\nexport const setSearchField = (text) => {\n    console.log()\n    return {\n        type: CHANGE_SEARCHFIELD,\n        payload: text\n    }\n    \n}\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    apiCall('https://jsonplaceholder.typicode.com/users')\n    .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n\n","\nexport const apiCall = (link) => \n    fetch(link).then(response => response.json());\n","import React, { Component } from 'react'; //, useState, useEffect (hooks)\nimport {connect} from 'react-redux';\nimport './App.css';\nimport CardList from '../components/CardList';\nimport Search from '../components/Search';\nimport Scroll from '../components/Scroll';\nimport Header from '../components/header';\n\nimport {requestRobots, setSearchField} from '../actions';\n\n\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  isPending: state.requestRobots.isPending,\n  error: state.requestRobots.error\n})\n\nconst mapDispatcherToProps = (dispatch) => ({\n  onSearchChange: (e) => dispatch(setSearchField(e.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n})\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      robots: []\n    };\n  }\n\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render(){\n\n    \n    const {searchField, onSearchChange, robots, isPending} = this.props\n    console.log(this.props)\n\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <Header/>\n          <Search searchField={searchField} searchChange={onSearchChange} />\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n\n        </div>\n          \n       \n      )\n    \n  }\n}\n\nexport default connect(mapStateToProps, mapDispatcherToProps)(App);\n\n// function App() { //utilisation des hooks plutôt qu'une classe\n\n//   const [robots, setRobots] = useState([])\n//   const [ searchField, setSearchField] = useState('')\n\n//   useEffect(()=> {\n//     fetch('https://jsonplaceholder.typicode.com/users')\n//      .then(response => response.json())\n//      .then(users => {setRobots(users)});\n\n//   },[])\n\n\n\n//   const onSearchChange = (e) => {\n//     setSearchField(e.target.value)\n//   }\n\n//   const filteredRobots = robots.filter(robot => {\n//     return robot.name.toLowerCase().includes(searchField.toLowerCase())\n//   })\n\n//   return !robots.length ?\n//     <h1>Loading</h1> :\n//     (\n//       <div className='tc'>\n//         <h1 className='f1'>Robots friends</h1>\n//         <Search searchField={searchField} searchChange={onSearchChange} />\n//         <Scroll>\n//           <CardList robots={filteredRobots} />\n//         </Scroll>\n//       </div>       \n//     )\n// }\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n\n\n  // onSearchChange = (e) => {\n  //   this.setState({searchField: e.target.value})\n  // }\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register(){\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }\n  \n","import {\n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\n    switch(action.type){\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, {searchField: action.payload}) //{ ...state, searchField: action.payload } //\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return {...state, isPending: true };\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending:false});\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload}, {isPending:false});\n        default:\n            return state;\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {createLogger} from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport {searchRobots, requestRobots} from './reducers'\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App  />\n    </Provider>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.default();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}